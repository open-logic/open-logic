library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;

library olo;
    use olo.en_cl_fix_pkg.all;

entity macc_test is
    generic (
        UseComponents_g : boolean := false
    );
    port (
        Clk       : in    std_logic;  
        Rst       : in    std_logic;
        In_A      : in    std_logic_vector(15 downto 0);
        In_B      : in    std_logic_vector(15 downto 0);
        Result    : out   std_logic_vector(47 downto 0)
    );
end entity;

architecture rtl of macc_test is
    constant InFmt_c   : FixFormat_t := (1,0,15);
    constant AddFmt_c  : FixFormat_t := (1,17,30);
begin

    g_comp : if UseComponents_g generate
        signal InReg_A : std_logic_vector(15 downto 0);
        signal InReg_B : std_logic_vector(15 downto 0);
        signal Mult    : std_logic_vector(cl_fix_width(AddFmt_c) - 1 downto 0);
        signal Add     : std_logic_vector(cl_fix_width(AddFmt_c) - 1 downto 0);
    begin
        p : process(Clk)
        begin
            if rising_edge(Clk) then
                InReg_A <= In_A;
                InReg_B <= In_B;
            end if;
        end process p;


        i_mult : entity olo.olo_fix_mult
            generic map (
                AFmt_g      => to_string(InFmt_c),
                BFmt_g      => to_string(InFmt_c),
                ResultFmt_g => to_string(AddFmt_c),
                OpRegs_g    => 1,
                RoundReg_g  => "NO",
                SatReg_g    => "NO"
            )
            port map (
                Clk         => Clk,
                Rst         => Rst,
                In_A        => InReg_A,
                In_B        => InReg_B,
                Out_Result  => Mult
            );

        i_add : entity olo.olo_fix_add
            generic map (
                AFmt_g      => to_string(AddFmt_c),
                BFmt_g      => to_string(AddFmt_c),
                ResultFmt_g => to_string(AddFmt_c),
                OpRegs_g    => 1,
                RoundReg_g  => "NO",
                SatReg_g    => "NO"
            )
            port map (
                Clk         => Clk,
                Rst         => Rst,
                In_A        => Mult,
                In_B        => Add,
                Out_Result  => Add
            );

            Result <= Add;
    end generate;

    g_proc : if not UseComponents_g generate
        signal InReg_A : std_logic_vector(15 downto 0);
        signal InReg_B : std_logic_vector(15 downto 0);
        signal Mult    : std_logic_vector(cl_fix_width(AddFmt_c) - 1 downto 0);
        signal Add     : std_logic_vector(cl_fix_width(AddFmt_c) - 1 downto 0);
    begin
        p : process(Clk)
        begin
            if rising_edge(Clk) then
                InReg_A <= In_A;
                InReg_B <= In_B;
                Mult <= cl_fix_mult(InReg_A, InFmt_c, InReg_B, InFmt_c, AddFmt_c, Trunc_s, None_s);
                Add <= cl_fix_add(Mult, AddFmt_c, Add, AddFmt_c, AddFmt_c, Trunc_s, None_s);
            end if;
        end process p;

        Result <= Add;

    end generate;

end;

library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;

library olo;

entity {{entity_name}} is
    port (
        Clk       : in    std_logic;  
        Rst       : in    std_logic;
        In_A      : in    std_logic_vector(17 downto 0);
        In_B      : in    std_logic_vector(17 downto 0);
        Result    : out   std_logic_vector(47 downto 0)
    );
end entity;

architecture rtl of {{entity_name}} is
begin

    i_macc : entity work.macc_test
{{generics}}
        port map (
            Clk       => Clk,
            Rst       => Rst,
            In_A      => In_A(15 downto 0),
            In_B      => In_B(15 downto 0),
            Result    => Result(47 downto 0)
        );
end;